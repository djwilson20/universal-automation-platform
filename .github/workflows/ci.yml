name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '1.8.3'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist black isort flake8 mypy bandit safety

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: black --check --diff src/ tests/

    - name: Check import sorting with isort
      run: isort --check-only --diff src/ tests/

    - name: Type check with mypy
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80 -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety pylint

    - name: Run black formatter check
      run: black --check --verbose src/ tests/

    - name: Run isort import check
      run: isort --check-only --verbose src/ tests/

    - name: Run flake8 linter
      run: flake8 src/ tests/ --max-line-length=127 --extend-ignore=E203,W503

    - name: Run pylint
      run: pylint src/ --disable=missing-docstring,too-few-public-methods
      continue-on-error: true

    - name: Run mypy type checker
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt

    - name: Run safety check for known vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Run bandit security linter
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements.txt

    - name: Build package
      run: |
        python -m build

    - name: Verify package installation
      run: |
        pip install dist/*.whl
        python -c "import src.enhanced_classifier; print('Package installed successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run integration tests
      run: |
        python integration_test.py
        python test_workflow_structure.py

    - name: Test sample data processing
      run: |
        python -c "
        import pandas as pd
        from src.enhanced_classifier import AIDataClassifier

        # Test with sample data
        classifier = AIDataClassifier()
        data = pd.read_csv('test_data.csv')
        results = classifier.classify_dataset(data, 'test_dataset')
        print('Integration test passed: Sample data classified successfully')
        "